plugins {
    id 'multiloader-common'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

repositories {
    mavenCentral()
    maven {
        name = 'SpongePowered'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net'
    }
}

minecraft {
    mappings channel: 'official', version: "${minecraft_version}"
    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
    }

    // Add the access transformer if it exists
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor("org.spongepowered:mixin:0.8.5-SNAPSHOT:processor")

    // Forge's hack fix
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

    compileOnly("maven.modrinth:configuration:${project.configuration_forge}")
    compileOnly("maven.modrinth:endrem:${project.endrem_forge}")
    // MixinExtras dependencies
    compileOnly fg.deobf("io.github.llamalad7:mixinextras-common:0.3.5")
    annotationProcessor "io.github.llamalad7:mixinextras-common:0.3.5"
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    commonResources sourceSets.main.resources.sourceDirectories.singleFile
}

tasks.withType(JavaCompile) {
    // Ensure the access transformer is applied during the compile phase
    options.compilerArgs += ['-Aaccesstransformer=' + project.file('src/main/resources/META-INF/accesstransformer.cfg').absolutePath]
}

tasks.withType(ProcessResources) {
    inputs.property 'version', project.version
    filesMatching('META-INF/mods.toml') {
        expand 'version': project.version
    }
}
